From 99ead2f37c09f44e70ba38f4a966cf30734c410e Mon Sep 17 00:00:00 2001
From: Rebecca Chang Swee Fun <rebecca.chang@starfivetech.com>
Date: Tue, 15 Feb 2022 06:06:40 +0000
Subject: [PATCH 19/23] breakpad: temporarily disable it

Signed-off-by: Rebecca Chang Swee Fun <rebecca.chang@starfivetech.com>
---
 BUILD.gn                                   |   38 +-
 chrome/BUILD.gn                            |    6 -
 chrome/test/BUILD.gn                       |    4 -
 components/crash/content/browser/BUILD.gn  |    9 -
 components/crash/core/app/BUILD.gn         |   14 -
 components/crash/core/common/BUILD.gn      |   11 -
 components/nacl/broker/BUILD.gn            |    1 -
 content/shell/BUILD.gn                     |   11 -
 remoting/base/BUILD.gn                     |    1 -
 remoting/host/setup/BUILD.gn               |    1 -
 third_party/breakpad/BUILD.gn              | 1146 --------------------
 tools/perf/chrome_telemetry_build/BUILD.gn |   17 -
 12 files changed, 1 insertion(+), 1258 deletions(-)
 delete mode 100644 third_party/breakpad/BUILD.gn

diff --git a/BUILD.gn b/BUILD.gn
index b89899174c694..16f5f07ffe72f 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -433,10 +433,6 @@ group("gn_all") {
 
   if (is_linux || is_chromeos || is_android) {
     deps += [
-      "//third_party/breakpad:breakpad_unittests",
-      "//third_party/breakpad:core-2-minidump",
-      "//third_party/breakpad:generate_test_dump",
-      "//third_party/breakpad:minidump-2-core",
       "//tools/dump_process_memory:dump_process",
       "//tools/memory/partition_allocator:all",
     ]
@@ -593,10 +589,6 @@ group("gn_all") {
       "//mojo:mojo_perftests",
       "//services/service_manager/public/cpp",
       "//testing/gmock:gmock_main",
-      "//third_party/breakpad:dump_syms($host_toolchain)",
-      "//third_party/breakpad:microdump_stackwalk($host_toolchain)",
-      "//third_party/breakpad:minidump_dump($host_toolchain)",
-      "//third_party/breakpad:minidump_stackwalk($host_toolchain)",
     ]
 
     if (!is_android) {
@@ -622,9 +614,6 @@ group("gn_all") {
 
   if (is_mac) {
     deps += [
-      "//third_party/breakpad:crash_inspector",
-      "//third_party/breakpad:dump_syms",
-
       # The following are accessibility API tools.
       "//tools/accessibility/inspect:ax_dump_events",
       "//tools/accessibility/inspect:ax_dump_tree",
@@ -669,8 +658,6 @@ group("gn_all") {
         host_os == "win") {
       deps += [ "//chrome/test/mini_installer:mini_installer_tests" ]
     }
-  } else if (!is_android && !is_ios && !is_fuchsia) {
-    deps += [ "//third_party/breakpad:symupload($host_toolchain)" ]
   }
 
   if (is_chromecast) {
@@ -950,7 +937,6 @@ if (is_win) {
       "//net:net_unittests",
       "//printing:printing_unittests",
       "//sql:sql_unittests",
-      "//third_party/breakpad:symupload($host_toolchain)",
       "//ui/base:ui_base_unittests",
       "//ui/gfx:gfx_unittests",
       "//ui/touch_selection:ui_touch_selection_unittests",
@@ -977,7 +963,6 @@ if (is_chromeos_ash) {
       "//ppapi/examples/video_decode",
       "//sandbox/linux:chrome_sandbox",
       "//sandbox/linux:sandbox_linux_unittests",
-      "//third_party/breakpad:minidump_stackwalk($host_toolchain)",
       "//third_party/dawn/src/dawn/tests:dawn_end2end_tests",
       "//third_party/dawn/src/dawn/tests:dawn_unittests",
 
@@ -1122,31 +1107,12 @@ if (!is_ios) {
 
     if (is_android) {
       data_deps += [
-        "//third_party/breakpad:breakpad_unittests",
-        "//third_party/breakpad:dump_syms",
-        "//third_party/breakpad:microdump_stackwalk",
-        "//third_party/breakpad:minidump_dump",
-        "//third_party/breakpad:minidump_stackwalk",
-        "//third_party/breakpad:symupload",
         "//tools/android/forwarder2",
       ]
     } else {
       data_deps += [ "//content/web_test:web_test_common_mojom_js_data_deps" ]
     }
 
-    if (!is_win && !is_android) {
-      data_deps +=
-          [ "//third_party/breakpad:minidump_stackwalk($host_toolchain)" ]
-    }
-
-    if (is_mac) {
-      data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
-    }
-
-    if (is_linux || is_chromeos) {
-      data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
-    }
-
     if (is_fuchsia) {
       data_deps += [
         "//build/config/fuchsia:deployment_resources",
@@ -1522,10 +1488,8 @@ group("chromium_builder_perf") {
 
     if (is_win) {
       data_deps += [ "//chrome/installer/mini_installer:mini_installer" ]
-    } else {
-      data_deps +=
-          [ "//third_party/breakpad:minidump_stackwalk($host_toolchain)" ]
     }
+
     if (is_win || is_android) {
       data_deps += [
         "//components:components_perftests",
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 8ea492bffcaaf..a56a135967f87 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -202,8 +202,6 @@ if (!is_android && !is_mac) {
         "//sandbox",
         "//sandbox/policy",
         "//sandbox/policy/mojom",
-        "//third_party/breakpad:breakpad_handler",
-        "//third_party/breakpad:breakpad_sender",
         "//third_party/crashpad/crashpad/util",
         "//ui/gl",
       ]
@@ -440,7 +438,6 @@ if (is_win) {
   tweak_info_plist("chrome_app_plist") {
     info_plist = "app/app-Info.plist"
     args = [
-      "--breakpad=0",
       "--scm=1",
       "--bundle_id=$chrome_mac_bundle_id",
     ]
@@ -712,7 +709,6 @@ if (is_win) {
   tweak_info_plist("chrome_helper_plist") {
     info_plist = "app/helper-Info.plist"
     args = [
-      "--breakpad=0",
       "--keystone=0",
       "--scm=0",
     ]
@@ -1126,7 +1122,6 @@ if (is_win) {
   tweak_info_plist("chrome_framework_plist") {
     info_plist = "app/framework-Info.plist"
     args = [
-      "--breakpad=0",
       "--keystone=0",
       "--scm=1",
       "--branding",
@@ -1366,7 +1361,6 @@ if (is_win) {
         "//content/public/app:aperitif",
         "//third_party/angle:libEGL",
         "//third_party/angle:libGLESv2",
-        "//third_party/breakpad:dump_syms",
         "//third_party/swiftshader/src/OpenGL/libEGL:swiftshader_libEGL",
         "//third_party/swiftshader/src/OpenGL/libGLESv2:swiftshader_libGLESv2",
         "//third_party/swiftshader/src/Vulkan:swiftshader_libvulkan",
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index f92e7fe9b1130..57179adcbd49e 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -399,7 +399,6 @@ static_library("test_support") {
     ]
     public_deps += [
       "//components/crash/core/app",
-      "//third_party/breakpad",
     ]
   }
 
@@ -9221,9 +9220,6 @@ test("chrome_app_unittests") {
     "//components/heap_profiling/in_process",
     "//components/safe_browsing:buildflags",
   ]
-  if (!is_fuchsia) {
-    deps += [ "//third_party/breakpad:client" ]
-  }
   if (enable_gwp_asan) {
     deps += [ "//components/gwp_asan/client" ]
   }
diff --git a/components/crash/content/browser/BUILD.gn b/components/crash/content/browser/BUILD.gn
index b2b08636e4020..96f24166dd17a 100644
--- a/components/crash/content/browser/BUILD.gn
+++ b/components/crash/content/browser/BUILD.gn
@@ -35,13 +35,6 @@ source_set("browser") {
     deps += [ "//third_party/crashpad/crashpad/client" ]
   }
 
-  # This is not in the GYP build but this target includes breakpad client
-  # headers, so add the dependency here.
-  if ((is_posix && !is_ios) || is_fuchsia) {
-    configs += [ "//third_party/breakpad:client_config" ]
-    public_configs = [ "//third_party/breakpad:client_config" ]
-  }
-
   if (is_android) {
     sources += [
       "child_exit_observer_android.cc",
@@ -59,8 +52,6 @@ source_set("browser") {
       "//components/crash/android:jni_headers",
       "//mojo/public/cpp/bindings",
     ]
-  } else {
-    deps += [ "//third_party/breakpad:client" ]
   }
 }
 
diff --git a/components/crash/core/app/BUILD.gn b/components/crash/core/app/BUILD.gn
index 7a5e5244cfdcc..fe66ed5022c99 100644
--- a/components/crash/core/app/BUILD.gn
+++ b/components/crash/core/app/BUILD.gn
@@ -52,15 +52,6 @@ static_library("app") {
     "crashpad.h",
   ]
 
-  if (is_linux || is_chromeos) {
-    sources += [
-      "breakpad_linux.cc",
-      "breakpad_linux.h",
-      "breakpad_linux_impl.h",
-      "crashpad_linux.cc",
-    ]
-  }
-
   defines = [ "CRASH_IMPLEMENTATION" ]
 
   public_deps = [ ":lib" ]
@@ -96,10 +87,6 @@ static_library("app") {
     ]
   }
 
-  if (is_linux || is_chromeos) {
-    deps += [ "//third_party/breakpad:client" ]
-  }
-
   if (is_win) {
     sources += [
       "crashpad_win.cc",
@@ -287,7 +274,6 @@ source_set("unit_tests") {
     ]
     deps += [
       ":run_as_crashpad_handler",
-      "//third_party/breakpad:client",
       "//third_party/crashpad/crashpad/client:client",
       "//third_party/crashpad/crashpad/snapshot:snapshot",
       "//third_party/crashpad/crashpad/util",
diff --git a/components/crash/core/common/BUILD.gn b/components/crash/core/common/BUILD.gn
index 81460a6cd795b..854828fd627ab 100644
--- a/components/crash/core/common/BUILD.gn
+++ b/components/crash/core/common/BUILD.gn
@@ -97,8 +97,6 @@ target(crash_key_target_type, "crash_key_lib") {
     sources += [ "crash_key_crashpad.cc" ]
     deps += [ "//third_party/crashpad/crashpad/client" ]
   } else {
-    include_dirs = [ "//third_party/breakpad/breakpad/src" ]
-
     if (is_ios) {
       sources += [ "crash_key_breakpad_ios.mm" ]
       deps += [
@@ -107,14 +105,8 @@ target(crash_key_target_type, "crash_key_lib") {
       ]
 
       configs += [ "//build/config/compiler:enable_arc" ]
-    } else {
-      sources += [
-        "crash_key_breakpad.cc",
-        "crash_key_internal.h",
-      ]
     }
 
-    deps += [ "//third_party/breakpad:client" ]
     if (use_combined_annotations) {
       public_deps += [ "//third_party/crashpad/crashpad/client" ]
     }
@@ -190,9 +182,6 @@ source_set("unit_tests") {
     sources += [ "crash_key_breakpad_ios_unittest.cc" ]
     deps += [ "//third_party/breakpad:client" ]
     include_dirs = [ "//third_party/breakpad/breakpad/src/" ]
-  } else if (!is_mac && !is_win && !is_fuchsia && !is_android) {
-    include_dirs = [ "//third_party/breakpad/breakpad/src/" ]
-    sources += [ "crash_key_breakpad_unittest.cc" ]
   }
 
   # TODO(crbug.com/1186718): Enable when crash keys are supported on Fuchsia.
diff --git a/components/nacl/broker/BUILD.gn b/components/nacl/broker/BUILD.gn
index 31a7822c7ee9a..7de416b4ec498 100644
--- a/components/nacl/broker/BUILD.gn
+++ b/components/nacl/broker/BUILD.gn
@@ -108,7 +108,6 @@ if (current_cpu == "x86") {
       "//content/public/common:static_switches",
       "//ppapi/proxy:ipc",
       "//sandbox",
-      "//third_party/breakpad:breakpad_handler",
     ]
   }
 
diff --git a/content/shell/BUILD.gn b/content/shell/BUILD.gn
index c65a820cdacdf..746aa637708d3 100644
--- a/content/shell/BUILD.gn
+++ b/content/shell/BUILD.gn
@@ -661,7 +661,6 @@ if (is_mac) {
     testonly = true
     info_plist = "app/framework-Info.plist"
     args = [
-      "--breakpad=0",
       "--keystone=0",
       "--scm=1",
       "--version",
@@ -739,7 +738,6 @@ if (is_mac) {
     testonly = true
     info_plist = "app/helper-Info.plist"
     args = [
-      "--breakpad=0",
       "--keystone=0",
       "--scm=0",
       "--version",
@@ -910,19 +908,10 @@ group("content_shell_crash_test") {
   if (is_win) {
     data_deps += [ "//build/win:copy_cdb_to_output" ]
   }
-  if (is_posix) {
-    data_deps += [
-      "//third_party/breakpad:dump_syms",
-      "//third_party/breakpad:minidump_stackwalk",
-    ]
-  }
   if (is_android) {
     data_deps += [
       "//build/android:devil_chromium_py",
       "//build/android:test_runner_py",
-      "//third_party/breakpad:microdump_stackwalk",
-      "//third_party/breakpad:minidump_dump",
-      "//third_party/breakpad:symupload",
       "//tools/android/forwarder2",
     ]
   }
diff --git a/remoting/base/BUILD.gn b/remoting/base/BUILD.gn
index f3af132e9f0c3..a91aaaaf88f38 100644
--- a/remoting/base/BUILD.gn
+++ b/remoting/base/BUILD.gn
@@ -256,7 +256,6 @@ static_library("test_support") {
   public_deps = [
     ":authorization",
     ":base",
-    ":breakpad",
     "//base",
     "//testing/gmock",
     "//testing/gtest",
diff --git a/remoting/host/setup/BUILD.gn b/remoting/host/setup/BUILD.gn
index 14da0a2b67c96..4abcfd75918d8 100644
--- a/remoting/host/setup/BUILD.gn
+++ b/remoting/host/setup/BUILD.gn
@@ -141,7 +141,6 @@ source_set("native_messaging_host_main") {
     "//net",
     "//remoting/base",
     "//remoting/base:authorization",
-    "//remoting/base:breakpad",
     "//remoting/host",
     "//remoting/host:common",
     "//remoting/host/base",
diff --git a/third_party/breakpad/BUILD.gn b/third_party/breakpad/BUILD.gn
deleted file mode 100644
index da663f2dd9b4a..0000000000000
--- a/third_party/breakpad/BUILD.gn
+++ /dev/null
@@ -1,1146 +0,0 @@
-# Copyright 2014 The Chromium Authors. All rights reserved.
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//build/config/chromeos/ui_mode.gni")
-import("//build/symlink.gni")
-import("//testing/libfuzzer/fuzzer_test.gni")
-import("//testing/test.gni")
-
-if (is_win) {
-  import("//build/config/win/visual_studio_version.gni")
-}
-
-config("tools_config") {
-  include_dirs = [
-    "breakpad/src",
-    "breakpad/src/third_party",
-  ]
-  if (is_android) {
-    defines = [ "__ANDROID__" ]
-  }
-  if (is_clang) {
-    cflags = [ "-Wno-tautological-constant-out-of-range-compare" ]
-  }
-}
-
-config("internal_config") {
-  include_dirs = [ "breakpad/src" ]
-  defines = []
-  if (is_debug) {
-    # This is needed for GTMLogger to work correctly.
-    defines += [ "DEBUG" ]
-  }
-  if (is_android) {
-    defines += [ "__ANDROID__" ]
-  }
-}
-
-config("client_config") {
-  include_dirs = [ "breakpad/src" ]
-  if (is_android) {
-    include_dirs += [ "breakpad/src/common/android/include" ]
-  }
-  if (is_chromeos_ash) {
-    defines = [ "__CHROMEOS__" ]
-  }
-}
-
-config("handler_config") {
-  include_dirs = [ "breakpad/src" ]
-}
-
-config("sender_config") {
-  include_dirs = [ "breakpad/src" ]
-}
-
-config("breakpad_unittest_config") {
-  # One of the breakpad unit tests test that we can detect the proper build-id.
-  # We must override the build-id for this one target.
-  ldflags = [ "-Wl,--build-id=0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f" ]
-}
-
-config("default_logging_severity_config") {
-  defines = [ "BPLOG_MINIMUM_SEVERITY=SEVERITY_ERROR" ]
-}
-
-config("fuzzing_logging_severity_config") {
-  defines = [ "BPLOG_MINIMUM_SEVERITY=SEVERITY_CRITICAL" ]
-}
-
-default_breakpad_configs = [ ":tools_config" ]
-
-if (use_fuzzing_engine) {
-  default_breakpad_configs += [ ":fuzzing_logging_severity_config" ]
-} else {
-  default_breakpad_configs += [ ":default_logging_severity_config" ]
-}
-
-# {micro,mini}dump_stackwalk and minidump_dump are tool-type executables
-# that do not build on Windows.
-if (!is_win) {
-  if (current_toolchain == host_toolchain) {
-    # Contains the code shared by both {micro,mini}dump_stackwalk.
-    static_library("stackwalk_common") {
-      sources = [
-        "breakpad/src/common/path_helper.cc",
-        "breakpad/src/common/path_helper.h",
-        "breakpad/src/common/scoped_ptr.h",
-        "breakpad/src/processor/basic_code_module.h",
-        "breakpad/src/processor/basic_code_modules.cc",
-        "breakpad/src/processor/basic_code_modules.h",
-        "breakpad/src/processor/basic_source_line_resolver.cc",
-        "breakpad/src/processor/call_stack.cc",
-        "breakpad/src/processor/cfi_frame_info.cc",
-        "breakpad/src/processor/cfi_frame_info.h",
-        "breakpad/src/processor/convert_old_arm64_context.cc",
-        "breakpad/src/processor/convert_old_arm64_context.h",
-        "breakpad/src/processor/disassembler_x86.cc",
-        "breakpad/src/processor/disassembler_x86.h",
-        "breakpad/src/processor/dump_context.cc",
-        "breakpad/src/processor/dump_object.cc",
-        "breakpad/src/processor/logging.cc",
-        "breakpad/src/processor/logging.h",
-        "breakpad/src/processor/pathname_stripper.cc",
-        "breakpad/src/processor/pathname_stripper.h",
-        "breakpad/src/processor/proc_maps_linux.cc",
-        "breakpad/src/processor/process_state.cc",
-        "breakpad/src/processor/simple_symbol_supplier.cc",
-        "breakpad/src/processor/simple_symbol_supplier.h",
-        "breakpad/src/processor/source_line_resolver_base.cc",
-        "breakpad/src/processor/stack_frame_cpu.cc",
-        "breakpad/src/processor/stack_frame_symbolizer.cc",
-        "breakpad/src/processor/stackwalk_common.cc",
-        "breakpad/src/processor/stackwalker.cc",
-        "breakpad/src/processor/stackwalker_amd64.cc",
-        "breakpad/src/processor/stackwalker_amd64.h",
-        "breakpad/src/processor/stackwalker_arm.cc",
-        "breakpad/src/processor/stackwalker_arm.h",
-        "breakpad/src/processor/stackwalker_arm64.cc",
-        "breakpad/src/processor/stackwalker_arm64.h",
-        "breakpad/src/processor/stackwalker_mips.cc",
-        "breakpad/src/processor/stackwalker_mips.h",
-        "breakpad/src/processor/stackwalker_ppc.cc",
-        "breakpad/src/processor/stackwalker_ppc.h",
-        "breakpad/src/processor/stackwalker_ppc64.cc",
-        "breakpad/src/processor/stackwalker_ppc64.h",
-        "breakpad/src/processor/stackwalker_sparc.cc",
-        "breakpad/src/processor/stackwalker_sparc.h",
-        "breakpad/src/processor/stackwalker_x86.cc",
-        "breakpad/src/processor/stackwalker_x86.h",
-        "breakpad/src/processor/tokenize.cc",
-        "breakpad/src/processor/tokenize.h",
-
-        # libdisasm
-        "breakpad/src/third_party/libdisasm/ia32_implicit.c",
-        "breakpad/src/third_party/libdisasm/ia32_implicit.h",
-        "breakpad/src/third_party/libdisasm/ia32_insn.c",
-        "breakpad/src/third_party/libdisasm/ia32_insn.h",
-        "breakpad/src/third_party/libdisasm/ia32_invariant.c",
-        "breakpad/src/third_party/libdisasm/ia32_invariant.h",
-        "breakpad/src/third_party/libdisasm/ia32_modrm.c",
-        "breakpad/src/third_party/libdisasm/ia32_modrm.h",
-        "breakpad/src/third_party/libdisasm/ia32_opcode_tables.c",
-        "breakpad/src/third_party/libdisasm/ia32_opcode_tables.h",
-        "breakpad/src/third_party/libdisasm/ia32_operand.c",
-        "breakpad/src/third_party/libdisasm/ia32_operand.h",
-        "breakpad/src/third_party/libdisasm/ia32_reg.c",
-        "breakpad/src/third_party/libdisasm/ia32_reg.h",
-        "breakpad/src/third_party/libdisasm/ia32_settings.c",
-        "breakpad/src/third_party/libdisasm/ia32_settings.h",
-        "breakpad/src/third_party/libdisasm/libdis.h",
-        "breakpad/src/third_party/libdisasm/qword.h",
-        "breakpad/src/third_party/libdisasm/x86_disasm.c",
-        "breakpad/src/third_party/libdisasm/x86_format.c",
-        "breakpad/src/third_party/libdisasm/x86_imm.c",
-        "breakpad/src/third_party/libdisasm/x86_imm.h",
-        "breakpad/src/third_party/libdisasm/x86_insn.c",
-        "breakpad/src/third_party/libdisasm/x86_misc.c",
-        "breakpad/src/third_party/libdisasm/x86_operand_list.c",
-        "breakpad/src/third_party/libdisasm/x86_operand_list.h",
-      ]
-
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-      configs += default_breakpad_configs
-    }
-
-    fuzzer_test("minidump_fuzzer") {
-      sources = [
-        "breakpad/src/processor/exploitability.cc",
-        "breakpad/src/processor/minidump.cc",
-        "breakpad/src/processor/minidump_processor.cc",
-        "minidump_fuzzer.cc",
-      ]
-
-      deps = [
-        ":stackwalk_common",
-        "//base",
-      ]
-
-      additional_configs = [ ":fuzzing_logging_severity_config" ]
-      include_dirs = [ "breakpad/src" ]
-
-      libfuzzer_options = [
-        # Suppress stdout from stackwalk_common, as it uses printf() directly.
-        "close_fd_mask=1",
-        "max_len=128000",
-      ]
-
-      sources += [
-        "breakpad/src/processor/exploitability_linux.cc",
-        "breakpad/src/processor/exploitability_linux.h",
-        "breakpad/src/processor/exploitability_win.cc",
-        "breakpad/src/processor/exploitability_win.h",
-        "breakpad/src/processor/symbolic_constants_win.cc",
-        "breakpad/src/processor/symbolic_constants_win.h",
-      ]
-    }
-
-    executable("microdump_stackwalk") {
-      sources = [
-        "breakpad/src/processor/microdump.cc",
-        "breakpad/src/processor/microdump_processor.cc",
-        "breakpad/src/processor/microdump_stackwalk.cc",
-      ]
-
-      deps = [ ":stackwalk_common" ]
-
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-      configs += default_breakpad_configs
-    }
-
-    executable("minidump_stackwalk") {
-      sources = [
-        "breakpad/src/processor/exploitability.cc",
-        "breakpad/src/processor/minidump.cc",
-        "breakpad/src/processor/minidump_processor.cc",
-        "breakpad/src/processor/minidump_stackwalk.cc",
-      ]
-
-      deps = [ ":stackwalk_common" ]
-
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-      configs += default_breakpad_configs
-
-      sources += [
-        "breakpad/src/processor/exploitability_linux.cc",
-        "breakpad/src/processor/exploitability_linux.h",
-        "breakpad/src/processor/exploitability_win.cc",
-        "breakpad/src/processor/exploitability_win.h",
-        "breakpad/src/processor/symbolic_constants_win.cc",
-        "breakpad/src/processor/symbolic_constants_win.h",
-      ]
-    }
-
-    executable("minidump_dump") {
-      sources = [
-        "breakpad/src/common/path_helper.cc",
-        "breakpad/src/common/path_helper.h",
-        "breakpad/src/common/scoped_ptr.h",
-        "breakpad/src/processor/basic_code_module.h",
-        "breakpad/src/processor/basic_code_modules.cc",
-        "breakpad/src/processor/basic_code_modules.h",
-        "breakpad/src/processor/convert_old_arm64_context.cc",
-        "breakpad/src/processor/convert_old_arm64_context.h",
-        "breakpad/src/processor/dump_context.cc",
-        "breakpad/src/processor/dump_object.cc",
-        "breakpad/src/processor/logging.cc",
-        "breakpad/src/processor/logging.h",
-        "breakpad/src/processor/minidump.cc",
-        "breakpad/src/processor/minidump_dump.cc",
-        "breakpad/src/processor/pathname_stripper.cc",
-        "breakpad/src/processor/pathname_stripper.h",
-        "breakpad/src/processor/proc_maps_linux.cc",
-      ]
-
-      configs += [ ":tools_config" ]
-
-      # There are some warnings in this code.
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-    }
-  } else {
-    # Aliases for convenience.
-    binary_symlink("microdump_stackwalk") {
-      binary_label = ":$target_name($host_toolchain)"
-    }
-    binary_symlink("minidump_stackwalk") {
-      binary_label = ":$target_name($host_toolchain)"
-    }
-    binary_symlink("minidump_dump") {
-      binary_label = ":$target_name($host_toolchain)"
-    }
-  }
-}
-
-# Mac --------------------------------------------------------------------------
-
-if (is_mac) {
-  if (current_toolchain == host_toolchain) {
-    source_set("common") {
-      sources = [
-        "breakpad/src/common/dwarf/bytereader.cc",
-        "breakpad/src/common/dwarf/dwarf2diehandler.cc",
-        "breakpad/src/common/dwarf/dwarf2reader.cc",
-        "breakpad/src/common/dwarf/elf_reader.cc",
-        "breakpad/src/common/dwarf/elf_reader.h",
-        "breakpad/src/common/dwarf_cfi_to_module.cc",
-        "breakpad/src/common/dwarf_cu_to_module.cc",
-        "breakpad/src/common/dwarf_line_to_module.cc",
-        "breakpad/src/common/dwarf_range_list_handler.cc",
-        "breakpad/src/common/dwarf_range_list_handler.h",
-        "breakpad/src/common/language.cc",
-        "breakpad/src/common/mac/arch_utilities.cc",
-        "breakpad/src/common/mac/arch_utilities.h",
-        "breakpad/src/common/mac/dump_syms.cc",
-        "breakpad/src/common/mac/file_id.cc",
-        "breakpad/src/common/mac/macho_id.cc",
-        "breakpad/src/common/mac/macho_reader.cc",
-        "breakpad/src/common/mac/macho_utilities.cc",
-        "breakpad/src/common/mac/macho_walker.cc",
-        "breakpad/src/common/md5.cc",
-        "breakpad/src/common/memory_range.h",
-        "breakpad/src/common/module.cc",
-        "breakpad/src/common/path_helper.cc",
-        "breakpad/src/common/path_helper.h",
-        "breakpad/src/common/scoped_ptr.h",
-        "breakpad/src/common/stabs_reader.cc",
-        "breakpad/src/common/stabs_to_module.cc",
-      ]
-      include_dirs = [ "breakpad/src/common/mac" ]
-
-      configs += [ ":internal_config" ]
-
-      # The DWARF utilities require -funsigned-char.
-      cflags = [ "-funsigned-char" ]
-
-      # dwarf2reader.cc uses dynamic_cast.
-      configs -= [ "//build/config/compiler:no_rtti" ]
-      configs += [ "//build/config/compiler:rtti" ]
-
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-
-      # For breakpad/src/common/stabs_reader.h.
-      defines = [ "HAVE_MACH_O_NLIST_H" ]
-    }
-
-    executable("dump_syms") {
-      sources = [ "breakpad/src/tools/mac/dump_syms/dump_syms_tool.cc" ]
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-
-      configs += [ ":internal_config" ]
-
-      frameworks = [ "Foundation.framework" ]
-
-      if (!is_debug) {
-        # dump_syms crashes when built at -O1, -O2, and -O3.  It does
-        # not crash at -Os.  To play it safe, dump_syms is always built
-        # at -O0 until this can be sorted out.
-        # https://crbug.com/google-breakpad/329
-        configs -= [ "//build/config/compiler:default_optimization" ]
-        cflags = [ "-O0" ]
-      }
-
-      deps = [ ":common" ]
-    }
-
-    executable("symupload") {
-      sources = [
-        "breakpad/src/common/mac/HTTPGetRequest.m",
-        "breakpad/src/common/mac/HTTPMultipartUpload.m",
-        "breakpad/src/common/mac/HTTPPutRequest.m",
-        "breakpad/src/common/mac/HTTPRequest.m",
-        "breakpad/src/common/mac/HTTPSimplePostRequest.m",
-        "breakpad/src/common/mac/SymbolCollectorClient.m",
-        "breakpad/src/common/mac/encoding_util.m",
-        "breakpad/src/tools/mac/symupload/symupload.mm",
-      ]
-
-      include_dirs = [ "breakpad/src/common/mac" ]
-
-      configs += [ ":internal_config" ]
-
-      frameworks = [ "Foundation.framework" ]
-
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-
-      deps = [ ":common" ]
-    }
-  } else {
-    binary_symlink("dump_syms") {
-      binary_label = ":$target_name($host_toolchain)"
-    }
-    binary_symlink("symupload") {
-      binary_label = ":$target_name($host_toolchain)"
-    }
-  }
-}
-
-if (is_ios) {
-  binary_symlink("dump_syms") {
-    binary_label = ":$target_name($host_toolchain)"
-  }
-  binary_symlink("symupload") {
-    binary_label = ":$target_name($host_toolchain)"
-  }
-}
-
-if (is_mac) {
-  static_library("utilities") {
-    sources = [
-      "breakpad/src/client/mac/crash_generation/ConfigFile.mm",
-      "breakpad/src/client/mac/handler/breakpad_nlist_64.cc",
-      "breakpad/src/client/mac/handler/dynamic_images.cc",
-      "breakpad/src/client/mac/handler/minidump_generator.cc",
-      "breakpad/src/client/minidump_file_writer.cc",
-      "breakpad/src/common/convert_UTF.cc",
-      "breakpad/src/common/mac/MachIPC.mm",
-      "breakpad/src/common/mac/arch_utilities.cc",
-      "breakpad/src/common/mac/arch_utilities.h",
-      "breakpad/src/common/mac/bootstrap_compat.cc",
-      "breakpad/src/common/mac/file_id.cc",
-      "breakpad/src/common/mac/launch_reporter.cc",
-      "breakpad/src/common/mac/macho_id.cc",
-      "breakpad/src/common/mac/macho_utilities.cc",
-      "breakpad/src/common/mac/macho_walker.cc",
-      "breakpad/src/common/mac/string_utilities.cc",
-      "breakpad/src/common/md5.cc",
-      "breakpad/src/common/scoped_ptr.h",
-      "breakpad/src/common/simple_string_dictionary.cc",
-      "breakpad/src/common/string_conversion.cc",
-    ]
-
-    configs += [ ":internal_config" ]
-
-    # There are some warnings in this code.
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [ "//build/config/compiler:no_chromium_code" ]
-  }
-
-  executable("crash_inspector") {
-    sources = [
-      "breakpad/src/client/mac/crash_generation/Inspector.mm",
-      "breakpad/src/client/mac/crash_generation/InspectorMain.mm",
-    ]
-
-    # TODO(GYP): 'mac_real_dsym': 1,
-
-    include_dirs = [
-      "breakpad/src/client/apple/Framework",
-      "breakpad/src/common/mac",
-      "breakpad/src",
-    ]
-    frameworks = [
-      "CoreServices.framework",
-      "Foundation.framework",
-    ]
-
-    deps = [ ":utilities" ]
-  }
-
-  # TODO(GYP) this target has some mac_bundle_resources stuff.
-  # executable("crash_report_sender") {
-  # }
-  group("crash_report_sender") {
-  }
-
-  config("breakpad_config") {
-    include_dirs = [ "breakpad/src/client/apple/Framework" ]
-  }
-
-  static_library("breakpad") {
-    sources = [
-      "breakpad/src/client/mac/Framework/Breakpad.mm",
-      "breakpad/src/client/mac/Framework/OnDemandServer.mm",
-      "breakpad/src/client/mac/crash_generation/crash_generation_client.cc",
-      "breakpad/src/client/mac/crash_generation/crash_generation_client.h",
-      "breakpad/src/client/mac/handler/exception_handler.cc",
-      "breakpad/src/client/mac/handler/protected_memory_allocator.cc",
-    ]
-
-    configs += [ ":internal_config" ]
-    public_configs = [ ":breakpad_config" ]
-
-    defines = [ "USE_PROTECTED_ALLOCATIONS=1" ]
-    include_dirs = [ "breakpad/src/client/apple/Framework" ]
-
-    # TODO(crbug.com/841631): Breakpad uses bootstrap_subset() and
-    # bootstrap_create_server(), both of which are deprecated starting in 10.10.
-    cflags = [ "-Wno-deprecated-declarations" ]
-
-    deps = [
-      ":crash_inspector",
-      ":crash_report_sender",
-      ":utilities",
-    ]
-  }
-
-  group("client") {
-    public_configs = [ ":client_config" ]
-  }
-}
-
-if (is_linux || is_chromeos || is_android) {
-  if (current_toolchain == host_toolchain) {
-    executable("symupload") {
-      sources = [
-        "breakpad/src/common/linux/http_upload.cc",
-        "breakpad/src/common/linux/http_upload.h",
-        "breakpad/src/common/linux/libcurl_wrapper.cc",
-        "breakpad/src/common/linux/libcurl_wrapper.h",
-        "breakpad/src/common/linux/symbol_collector_client.cc",
-        "breakpad/src/common/linux/symbol_collector_client.h",
-        "breakpad/src/common/linux/symbol_upload.cc",
-        "breakpad/src/common/linux/symbol_upload.h",
-        "breakpad/src/common/path_helper.cc",
-        "breakpad/src/common/path_helper.h",
-        "breakpad/src/common/scoped_ptr.h",
-        "breakpad/src/tools/linux/symupload/sym_upload.cc",
-      ]
-
-      include_dirs = [
-        "breakpad/src",
-        "breakpad/src/third_party",
-      ]
-
-      configs += [ ":tools_config" ]
-
-      libs = [ "dl" ]
-    }
-
-    # dump_syms is a host tool, so only compile it for the host system.
-    executable("dump_syms") {
-      sources = [
-        "breakpad/src/common/dwarf/bytereader.cc",
-        "breakpad/src/common/dwarf/dwarf2diehandler.cc",
-        "breakpad/src/common/dwarf/dwarf2reader.cc",
-        "breakpad/src/common/dwarf/elf_reader.cc",
-        "breakpad/src/common/dwarf/elf_reader.h",
-        "breakpad/src/common/dwarf_cfi_to_module.cc",
-        "breakpad/src/common/dwarf_cfi_to_module.h",
-        "breakpad/src/common/dwarf_cu_to_module.cc",
-        "breakpad/src/common/dwarf_cu_to_module.h",
-        "breakpad/src/common/dwarf_line_to_module.cc",
-        "breakpad/src/common/dwarf_line_to_module.h",
-        "breakpad/src/common/dwarf_range_list_handler.cc",
-        "breakpad/src/common/dwarf_range_list_handler.h",
-        "breakpad/src/common/language.cc",
-        "breakpad/src/common/language.h",
-        "breakpad/src/common/linux/crc32.cc",
-        "breakpad/src/common/linux/crc32.h",
-        "breakpad/src/common/linux/dump_symbols.cc",
-        "breakpad/src/common/linux/dump_symbols.h",
-        "breakpad/src/common/linux/elf_symbols_to_module.cc",
-        "breakpad/src/common/linux/elf_symbols_to_module.h",
-        "breakpad/src/common/linux/elfutils.cc",
-        "breakpad/src/common/linux/elfutils.h",
-        "breakpad/src/common/linux/file_id.cc",
-        "breakpad/src/common/linux/file_id.h",
-        "breakpad/src/common/linux/guid_creator.h",
-        "breakpad/src/common/linux/linux_libc_support.cc",
-        "breakpad/src/common/linux/linux_libc_support.h",
-        "breakpad/src/common/linux/memory_mapped_file.cc",
-        "breakpad/src/common/linux/memory_mapped_file.h",
-        "breakpad/src/common/memory_allocator.h",
-        "breakpad/src/common/memory_range.h",
-        "breakpad/src/common/module.cc",
-        "breakpad/src/common/module.h",
-        "breakpad/src/common/path_helper.cc",
-        "breakpad/src/common/path_helper.h",
-        "breakpad/src/common/scoped_ptr.h",
-        "breakpad/src/common/stabs_reader.cc",
-        "breakpad/src/common/stabs_reader.h",
-        "breakpad/src/common/stabs_to_module.cc",
-        "breakpad/src/common/stabs_to_module.h",
-        "breakpad/src/tools/linux/dump_syms/dump_syms.cc",
-      ]
-
-      # There are some warnings in this code.
-      configs -= [ "//build/config/compiler:chromium_code" ]
-      configs += [ "//build/config/compiler:no_chromium_code" ]
-
-      # dwarf2reader.cc uses dynamic_cast. Because we don't typically
-      # don't support RTTI, we enable it for this single target. Since
-      # dump_syms doesn't share any object files with anything else,
-      # this doesn't end up polluting Chrome itself.
-      configs -= [ "//build/config/compiler:no_rtti" ]
-      configs += [ "//build/config/compiler:rtti" ]
-
-      # Breakpad rev 583 introduced this flag.
-      # Using this define, stabs_reader.h will include a.out.h to
-      # build on Linux.
-      defines = [ "HAVE_A_OUT_H" ]
-
-      include_dirs = [ "breakpad/src" ]
-    }
-  } else {
-    # Aliases for convenience.
-    binary_symlink("dump_syms") {
-      binary_label = ":dump_syms($host_toolchain)"
-    }
-    binary_symlink("symupload") {
-      binary_label = ":symupload($host_toolchain)"
-    }
-  }
-
-  static_library("client") {
-    sources = [
-      "breakpad/src/client/linux/crash_generation/crash_generation_client.cc",
-      "breakpad/src/client/linux/crash_generation/crash_generation_client.h",
-      "breakpad/src/client/linux/dump_writer_common/mapping_info.h",
-      "breakpad/src/client/linux/dump_writer_common/thread_info.cc",
-      "breakpad/src/client/linux/dump_writer_common/thread_info.h",
-      "breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc",
-      "breakpad/src/client/linux/dump_writer_common/ucontext_reader.h",
-      "breakpad/src/client/linux/handler/exception_handler.cc",
-      "breakpad/src/client/linux/handler/exception_handler.h",
-      "breakpad/src/client/linux/handler/minidump_descriptor.cc",
-      "breakpad/src/client/linux/handler/minidump_descriptor.h",
-      "breakpad/src/client/linux/log/log.cc",
-      "breakpad/src/client/linux/log/log.h",
-      "breakpad/src/client/linux/microdump_writer/microdump_writer.cc",
-      "breakpad/src/client/linux/microdump_writer/microdump_writer.h",
-      "breakpad/src/client/linux/minidump_writer/cpu_set.h",
-      "breakpad/src/client/linux/minidump_writer/directory_reader.h",
-      "breakpad/src/client/linux/minidump_writer/line_reader.h",
-      "breakpad/src/client/linux/minidump_writer/linux_core_dumper.cc",
-      "breakpad/src/client/linux/minidump_writer/linux_core_dumper.h",
-      "breakpad/src/client/linux/minidump_writer/linux_dumper.cc",
-      "breakpad/src/client/linux/minidump_writer/linux_dumper.h",
-      "breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.cc",
-      "breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper.h",
-      "breakpad/src/client/linux/minidump_writer/minidump_writer.cc",
-      "breakpad/src/client/linux/minidump_writer/minidump_writer.h",
-      "breakpad/src/client/linux/minidump_writer/proc_cpuinfo_reader.h",
-      "breakpad/src/client/minidump_file_writer-inl.h",
-      "breakpad/src/client/minidump_file_writer.cc",
-      "breakpad/src/client/minidump_file_writer.h",
-      "breakpad/src/common/convert_UTF.cc",
-      "breakpad/src/common/convert_UTF.h",
-      "breakpad/src/common/linux/breakpad_getcontext.S",
-      "breakpad/src/common/linux/elf_core_dump.cc",
-      "breakpad/src/common/linux/elf_core_dump.h",
-      "breakpad/src/common/linux/elfutils.cc",
-      "breakpad/src/common/linux/elfutils.h",
-      "breakpad/src/common/linux/file_id.cc",
-      "breakpad/src/common/linux/file_id.h",
-      "breakpad/src/common/linux/google_crashdump_uploader.cc",
-      "breakpad/src/common/linux/google_crashdump_uploader.h",
-      "breakpad/src/common/linux/guid_creator.cc",
-      "breakpad/src/common/linux/guid_creator.h",
-      "breakpad/src/common/linux/libcurl_wrapper.cc",
-      "breakpad/src/common/linux/libcurl_wrapper.h",
-      "breakpad/src/common/linux/linux_libc_support.cc",
-      "breakpad/src/common/linux/linux_libc_support.h",
-      "breakpad/src/common/linux/memory_mapped_file.cc",
-      "breakpad/src/common/linux/memory_mapped_file.h",
-      "breakpad/src/common/linux/safe_readlink.cc",
-      "breakpad/src/common/linux/safe_readlink.h",
-      "breakpad/src/common/memory_allocator.h",
-      "breakpad/src/common/memory_range.h",
-      "breakpad/src/common/scoped_ptr.h",
-      "breakpad/src/common/simple_string_dictionary.cc",
-      "breakpad/src/common/simple_string_dictionary.h",
-      "breakpad/src/common/string_conversion.cc",
-      "breakpad/src/common/string_conversion.h",
-    ]
-
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [ "//build/config/compiler:no_chromium_code" ]
-    public_configs = [ ":client_config" ]
-
-    if (current_cpu == "arm" && is_chromeos_ash) {
-      # Avoid running out of registers in
-      # linux_syscall_support.h:sys_clone()'s inline assembly.
-      cflags = [ "-marm" ]
-    }
-
-    libs = [ "dl" ]
-
-    include_dirs = [
-      ".",
-      "breakpad/src",
-      "breakpad/src/client",
-      "breakpad/src/third_party/linux/include",
-    ]
-  }
-
-  static_library("processor_support") {
-    sources = [
-      "breakpad/src/common/scoped_ptr.h",
-      "breakpad/src/processor/basic_code_module.h",
-      "breakpad/src/processor/basic_code_modules.cc",
-      "breakpad/src/processor/basic_code_modules.h",
-      "breakpad/src/processor/convert_old_arm64_context.cc",
-      "breakpad/src/processor/convert_old_arm64_context.h",
-      "breakpad/src/processor/dump_context.cc",
-      "breakpad/src/processor/dump_object.cc",
-      "breakpad/src/processor/logging.cc",
-      "breakpad/src/processor/logging.h",
-      "breakpad/src/processor/minidump.cc",
-      "breakpad/src/processor/pathname_stripper.cc",
-      "breakpad/src/processor/pathname_stripper.h",
-      "breakpad/src/processor/proc_maps_linux.cc",
-    ]
-
-    include_dirs = [
-      "breakpad/src",
-      "breakpad/src/client",
-      "breakpad/src/third_party/linux/include",
-      ".",
-    ]
-
-    # There are some warnings in this code.
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [ "//build/config/compiler:no_chromium_code" ]
-  }
-
-  test("breakpad_unittests") {
-    sources = [
-      "breakpad/src/client/linux/handler/exception_handler_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/cpu_set_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/directory_reader_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/line_reader_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/linux_core_dumper_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/linux_ptrace_dumper_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/minidump_writer_unittest.cc",
-      "breakpad/src/client/linux/minidump_writer/minidump_writer_unittest_utils.cc",
-      "breakpad/src/client/linux/minidump_writer/proc_cpuinfo_reader_unittest.cc",
-      "breakpad/src/common/linux/breakpad_getcontext_unittest.cc",
-      "breakpad/src/common/linux/elf_core_dump_unittest.cc",
-      "breakpad/src/common/linux/file_id_unittest.cc",
-      "breakpad/src/common/linux/linux_libc_support_unittest.cc",
-      "breakpad/src/common/linux/synth_elf.cc",
-      "breakpad/src/common/linux/tests/auto_testfile.h",
-      "breakpad/src/common/linux/tests/crash_generator.cc",
-      "breakpad/src/common/linux/tests/crash_generator.h",
-      "breakpad/src/common/memory_allocator_unittest.cc",
-      "breakpad/src/common/memory_range.h",
-      "breakpad/src/common/simple_string_dictionary_unittest.cc",
-      "breakpad/src/common/test_assembler.cc",
-      "breakpad/src/common/tests/file_utils.cc",
-      "breakpad/src/common/tests/file_utils.h",
-      "breakpad/src/tools/linux/md2core/minidump_memory_range.h",
-      "breakpad/src/tools/linux/md2core/minidump_memory_range_unittest.cc",
-      "linux/breakpad_googletest_includes.h",
-    ]
-
-    deps = [
-      ":client",
-      ":processor_support",
-      "//testing/gmock",
-      "//testing/gtest",
-      "//testing/gtest:gtest_main",
-    ]
-
-    data_deps = [
-      ":linux_dumper_unittest_helper",
-      "//testing/buildbot/filters:breakpad_unittests_filters",
-    ]
-
-    include_dirs = [
-      "linux",  # Use our copy of breakpad_googletest_includes.h
-      ".",
-    ]
-
-    # There are some warnings in this code.
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [
-      ":client_config",
-      "//build/config/compiler:no_chromium_code",
-    ]
-
-    if (is_clang) {
-      # See https://crbug.com/138571#c18
-      cflags = [ "-Wno-unused-value" ]
-    }
-
-    if (is_android) {
-      use_raw_android_executable = true
-      libs = [ "log" ]
-      extra_dist_files = [ "$root_out_dir/linux_dumper_unittest_helper" ]
-    }
-
-    # Add the breakpad unittest config at the end to override all configs.
-    configs += [ ":breakpad_unittest_config" ]
-  }
-
-  executable("linux_dumper_unittest_helper") {
-    testonly = true
-    sources = [ "breakpad/src/client/linux/minidump_writer/linux_dumper_unittest_helper.cc" ]
-    deps = [ ":processor_support" ]
-
-    configs += [ ":client_config" ]
-
-    if (is_component_build) {
-      ldflags = [ "-Wl,-rpath,\$ORIGIN" ]
-    }
-  }
-
-  executable("generate_test_dump") {
-    testonly = true
-    sources = [ "linux/generate-test-dump.cc" ]
-
-    # This file has an unused variable warning.
-    configs -= [ "//build/config/compiler:chromium_code" ]
-    configs += [
-      ":client_config",
-      "//build/config/compiler:no_chromium_code",
-    ]
-
-    deps = [ ":client" ]
-
-    if (is_android) {
-      libs = [ "log" ]
-    }
-  }
-
-  executable("minidump-2-core") {
-    sources = [
-      "breakpad/src/common/path_helper.cc",
-      "breakpad/src/common/path_helper.h",
-      "breakpad/src/tools/linux/md2core/minidump-2-core.cc",
-      "breakpad/src/tools/linux/md2core/minidump_memory_range.h",
-    ]
-
-    include_dirs = [ "breakpad/src" ]
-
-    deps = [ ":client" ]
-  }
-
-  executable("core-2-minidump") {
-    sources = [
-      "breakpad/src/common/path_helper.cc",
-      "breakpad/src/common/path_helper.h",
-      "breakpad/src/tools/linux/core2md/core2md.cc",
-    ]
-
-    deps = [ ":client" ]
-
-    include_dirs = [ "breakpad/src" ]
-  }
-}
-
-if (is_win) {
-  # Force a native symupload, since Chrome tries to be "helpful" and not really
-  # differentiate target vs. host for x86/x64 builds.
-  #
-  # Normally, this would just use the (current_toolchain == host_toolchain)
-  # condition, which would cause these targets to only be compiled for the host
-  # CPU (i.e. to only build "native" binaries), but the Chrome Windows build
-  # will "always use the target CPU for host builds for x86/x64":
-  # https://crrev.com/3258ed4d9d755a3564d98bef8707bbdb5f8a7974/config/BUILDCONFIG.gn#199
-  # This means that host_toolchain will be x86 (32-bit) if the target is x86,
-  # even when the host is actually x64 (64-bit), which causes this to create
-  # 32-bit binaries, despite wanting native, 64-bit binaries.
-  #
-  # Adding the second condition enables this block for the "true" host
-  # toolchain as well, which allows creating 64-bit binaries even when the host
-  # toolchain is redefined to a 32-bit target.
-  if (is_clang) {
-    symupload_toolchain = "//build/toolchain/win:win_clang_$host_cpu"
-  } else {
-    symupload_toolchain = "//build/toolchain/win:$host_cpu"
-  }
-  if (current_toolchain == host_toolchain ||
-      current_toolchain == symupload_toolchain) {
-    static_library("common_windows") {
-      include_dirs = [
-        "$visual_studio_path/DIA SDK/include",
-        "breakpad/src",
-      ]
-      sources = [
-        "breakpad/src/common/windows/dia_util.cc",
-        "breakpad/src/common/windows/dia_util.h",
-        "breakpad/src/common/windows/guid_string.cc",
-        "breakpad/src/common/windows/guid_string.h",
-        "breakpad/src/common/windows/http_upload.cc",
-        "breakpad/src/common/windows/http_upload.h",
-        "breakpad/src/common/windows/module_info.h",
-        "breakpad/src/common/windows/omap.cc",
-        "breakpad/src/common/windows/omap.h",
-        "breakpad/src/common/windows/omap_internal.h",
-        "breakpad/src/common/windows/pdb_source_line_writer.cc",
-        "breakpad/src/common/windows/pdb_source_line_writer.h",
-        "breakpad/src/common/windows/pe_source_line_writer.cc",
-        "breakpad/src/common/windows/pe_source_line_writer.h",
-        "breakpad/src/common/windows/pe_util.cc",
-        "breakpad/src/common/windows/pe_util.h",
-        "breakpad/src/common/windows/string_utils-inl.h",
-        "breakpad/src/common/windows/string_utils.cc",
-        "breakpad/src/common/windows/symbol_collector_client.cc",
-        "breakpad/src/common/windows/symbol_collector_client.h",
-      ]
-    }
-
-    static_library("ms_symbol_server_converter") {
-      include_dirs = [
-        "$visual_studio_path/DIA SDK/include",
-        "breakpad/src",
-      ]
-
-      sources = [
-        "breakpad/src/tools/windows/converter/ms_symbol_server_converter.cc",
-      ]
-
-      deps = [ "//third_party/breakpad:common_windows" ]
-
-      libs = [ "Pathcch.lib" ]
-    }
-
-    executable("dump_syms") {
-      # TODO(scottmg) using this with VS2015 may break the crash server.
-      # https://crbug.com/696671
-      include_dirs = [
-        "$visual_studio_path/DIA SDK/include",
-        "breakpad/src",
-      ]
-
-      sources = [ "breakpad/src/tools/windows/dump_syms/dump_syms.cc" ]
-
-      deps = [ "//third_party/breakpad:common_windows" ]
-
-      lib_dirs = []
-      if (current_cpu == "x64") {
-        lib_dirs += [ "$visual_studio_path/DIA SDK/lib/amd64" ]
-      } else {
-        lib_dirs += [ "$visual_studio_path/DIA SDK/lib" ]
-      }
-
-      libs = [
-        "diaguids.lib",
-        "imagehlp.lib",
-      ]
-
-      if (is_clang) {
-        # clang complains about microsoft-specific goto extensions. Instead of
-        # rewriting decade-old, goto-ridden code, disable the warning.
-        cflags = [ "-Wno-microsoft-goto" ]
-      }
-    }
-
-    group("symupload") {
-      deps = [ ":symupload_win($symupload_toolchain)" ]
-    }
-    executable("symupload_win") {
-      include_dirs = [
-        "$visual_studio_path/DIA SDK/include",
-        "breakpad/src",
-      ]
-      output_name = "symupload"
-
-      # Invert the normal logic which puts binaries built with the default
-      # (target) toolchain into the root output directory, and other toolchain
-      # binaries into subdirs. This gives preference to the native symupload,
-      # which is what's wanted in most situations. The cross-compiled binary
-      # can still be created (by building "symupload_win" instead of
-      # "symupload") and found in the corresponding toolchain subdir (e.g.
-      # //out/Release/win_clang_x86/ when cross-compiling to x86).
-      if (current_toolchain == symupload_toolchain) {
-        output_dir = "$root_build_dir"
-      } else {
-        output_name = "symupload_$target_cpu"
-        toolchain_parts =
-            string_split(get_path_info(current_toolchain, "name"), ":")
-        output_dir = "$root_out_dir/" + toolchain_parts[1]
-      }
-
-      sources = [ "breakpad/src/tools/windows/symupload/symupload.cc" ]
-
-      deps = [ "//third_party/breakpad:common_windows" ]
-
-      ldflags = [ "/LARGEADDRESSAWARE" ]
-
-      lib_dirs = []
-      if (current_cpu == "x64") {
-        lib_dirs += [ "$visual_studio_path/DIA SDK/lib/amd64" ]
-      } else {
-        lib_dirs += [ "$visual_studio_path/DIA SDK/lib" ]
-      }
-
-      libs = [
-        "diaguids.lib",
-        "imagehlp.lib",
-      ]
-
-      if (is_clang) {
-        # clang complains about microsoft-specific goto extensions. Instead of
-        # rewriting decade-old, goto-ridden code, disable the warning.
-        cflags = [ "-Wno-microsoft-goto" ]
-      }
-    }
-
-    executable("google_converter") {
-      include_dirs = [
-        "$visual_studio_path/DIA SDK/include",
-        "breakpad/src",
-      ]
-
-      sources = [
-        "breakpad/src/tools/windows/converter_exe/converter.cc",
-        "breakpad/src/tools/windows/converter_exe/escaping.cc",
-        "breakpad/src/tools/windows/converter_exe/escaping.h",
-        "breakpad/src/tools/windows/converter_exe/http_download.cc",
-        "breakpad/src/tools/windows/converter_exe/tokenizer.cc",
-        "breakpad/src/tools/windows/converter_exe/winhttp_client.cc",
-        "breakpad/src/tools/windows/converter_exe/wininet_client.cc",
-      ]
-
-      deps = [
-        "//third_party/breakpad:common_windows",
-        "//third_party/breakpad:ms_symbol_server_converter",
-      ]
-
-      ldflags = [
-        "/DELAYLOAD:dbghelp.dll",
-        "/DELAYLOAD:dwmapi.dll",
-        "/DELAYLOAD:uxtheme.dll",
-      ]
-
-      lib_dirs = []
-      if (current_cpu == "x64") {
-        lib_dirs += [ "$visual_studio_path/DIA SDK/lib/amd64" ]
-      } else {
-        lib_dirs += [ "$visual_studio_path/DIA SDK/lib" ]
-      }
-
-      libs = [
-        "diaguids.lib",
-        "imagehlp.lib",
-      ]
-
-      if (is_clang) {
-        # clang complains about microsoft-specific goto extensions. Instead of
-        # rewriting decade-old, goto-ridden code, disable the warning.
-        cflags = [ "-Wno-microsoft-goto" ]
-      }
-    }
-  } else {
-    # handle dump_syms appropriately for Windows cross build when necessary,
-    # such as symlinking.
-  }
-}
-
-if (is_ios) {
-  static_library("client") {
-    sources = [
-      "breakpad/src/client/ios/Breakpad.h",
-      "breakpad/src/client/ios/Breakpad.mm",
-      "breakpad/src/client/ios/BreakpadController.h",
-      "breakpad/src/client/ios/BreakpadController.mm",
-      "breakpad/src/client/ios/handler/ios_exception_minidump_generator.h",
-      "breakpad/src/client/ios/handler/ios_exception_minidump_generator.mm",
-      "breakpad/src/client/mac/crash_generation/ConfigFile.h",
-      "breakpad/src/client/mac/crash_generation/ConfigFile.mm",
-      "breakpad/src/client/mac/handler/breakpad_nlist_64.cc",
-      "breakpad/src/client/mac/handler/breakpad_nlist_64.h",
-      "breakpad/src/client/mac/handler/dynamic_images.cc",
-      "breakpad/src/client/mac/handler/dynamic_images.h",
-      "breakpad/src/client/mac/handler/exception_handler.cc",
-      "breakpad/src/client/mac/handler/exception_handler.h",
-      "breakpad/src/client/mac/handler/minidump_generator.cc",
-      "breakpad/src/client/mac/handler/minidump_generator.h",
-      "breakpad/src/client/mac/handler/protected_memory_allocator.cc",
-      "breakpad/src/client/mac/handler/protected_memory_allocator.h",
-      "breakpad/src/client/mac/sender/uploader.h",
-      "breakpad/src/client/mac/sender/uploader.mm",
-      "breakpad/src/client/minidump_file_writer-inl.h",
-      "breakpad/src/client/minidump_file_writer.cc",
-      "breakpad/src/client/minidump_file_writer.h",
-      "breakpad/src/common/convert_UTF.cc",
-      "breakpad/src/common/convert_UTF.h",
-      "breakpad/src/common/long_string_dictionary.cc",
-      "breakpad/src/common/mac/HTTPMultipartUpload.m",
-      "breakpad/src/common/mac/HTTPRequest.m",
-      "breakpad/src/common/mac/encoding_util.m",
-      "breakpad/src/common/mac/file_id.cc",
-      "breakpad/src/common/mac/file_id.h",
-      "breakpad/src/common/mac/macho_id.cc",
-      "breakpad/src/common/mac/macho_id.h",
-      "breakpad/src/common/mac/macho_utilities.cc",
-      "breakpad/src/common/mac/macho_utilities.h",
-      "breakpad/src/common/mac/macho_walker.cc",
-      "breakpad/src/common/mac/macho_walker.h",
-      "breakpad/src/common/mac/string_utilities.cc",
-      "breakpad/src/common/mac/string_utilities.h",
-      "breakpad/src/common/md5.cc",
-      "breakpad/src/common/md5.h",
-      "breakpad/src/common/simple_string_dictionary.cc",
-      "breakpad/src/common/simple_string_dictionary.h",
-      "breakpad/src/common/string_conversion.cc",
-      "breakpad/src/common/string_conversion.h",
-      "breakpad/src/google_breakpad/common/minidump_format.h",
-    ]
-
-    include_dirs = [
-      "breakpad/src",
-      "breakpad/src/client/mac/Framework",
-      "breakpad/src/common/mac",
-    ]
-
-    public_configs = [ ":client_config" ]
-
-    if (is_clang) {
-      # See https://crbug.com/google-breakpad/675.
-      cflags = [ "-Wno-deprecated-declarations" ]
-    }
-  }
-}
-
-if (is_win) {
-  group("client") {
-    public_configs = [ ":client_config" ]
-  }
-
-  config("breakpad_handler_warnings") {
-    if (is_clang) {
-      # See https://crbug.com/google-breakpad/658.
-      cflags = [ "-Wno-reorder" ]
-    }
-  }
-
-  static_library("breakpad_handler") {
-    configs += [ ":handler_config" ]
-    if (is_win) {
-      public_configs = [ ":handler_config" ]
-    }
-
-    defines = [ "BREAKPAD_NO_TERMINATE_THREAD" ]
-
-    sources = [
-      "breakpad/src/client/windows/crash_generation/client_info.cc",
-      "breakpad/src/client/windows/crash_generation/client_info.h",
-      "breakpad/src/client/windows/crash_generation/crash_generation_client.cc",
-      "breakpad/src/client/windows/crash_generation/crash_generation_client.h",
-      "breakpad/src/client/windows/crash_generation/crash_generation_server.cc",
-      "breakpad/src/client/windows/crash_generation/crash_generation_server.h",
-      "breakpad/src/client/windows/crash_generation/minidump_generator.cc",
-      "breakpad/src/client/windows/crash_generation/minidump_generator.h",
-      "breakpad/src/client/windows/handler/exception_handler.cc",
-      "breakpad/src/client/windows/handler/exception_handler.h",
-      "breakpad/src/common/windows/guid_string.cc",
-      "breakpad/src/common/windows/guid_string.h",
-      "breakpad/src/common/windows/string_utils-inl.h",
-      "breakpad/src/google_breakpad/common/minidump_format.h",
-    ]
-    configs += [ ":breakpad_handler_warnings" ]
-  }
-
-  source_set("breakpad_sender") {
-    sources = [
-      "breakpad/src/client/windows/sender/crash_report_sender.cc",
-      "breakpad/src/client/windows/sender/crash_report_sender.h",
-      "breakpad/src/common/windows/http_upload.cc",
-      "breakpad/src/common/windows/http_upload.h",
-      "breakpad/src/common/windows/string_utils-inl.h",
-    ]
-    configs += [ ":sender_config" ]
-    public_configs = [ ":sender_config" ]
-  }
-}
diff --git a/tools/perf/chrome_telemetry_build/BUILD.gn b/tools/perf/chrome_telemetry_build/BUILD.gn
index 2d6c25ea2d0bb..1aaf0b2ce3d66 100644
--- a/tools/perf/chrome_telemetry_build/BUILD.gn
+++ b/tools/perf/chrome_telemetry_build/BUILD.gn
@@ -46,8 +46,6 @@ group("telemetry_chrome_test") {
   }
 
   if (is_linux || is_chromeos) {
-    data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
-
     # CrOS currently has issues with the locally compiled version of
     # crashpad_database_util, so only include it on traditional Linux
     # platforms.
@@ -61,7 +59,6 @@ group("telemetry_chrome_test") {
     data_deps += [
       "//chrome:chrome_framework",
       "//chrome:chrome_helper_app_default",
-      "//third_party/breakpad:dump_syms",
       "//third_party/crashpad/crashpad/tools:crashpad_database_util",
     ]
   }
@@ -211,20 +208,6 @@ group("telemetry_chrome_test_without_chrome") {
     "//tools/metrics:metrics_python_tests",
   ]
 
-  # Cr-Fuchsia doesn't support breakpad.
-  if (!is_win && !is_fuchsia) {
-    data_deps += [
-      # This is defined for Windows, but is unused by Telemetry on
-      # Windows, and including it can have issues when cross-compiling
-      # for Arm-based Windows.
-      "//third_party/breakpad:dump_syms",
-
-      # These explicitly not defined for Windows builds in Breakpad.
-      "//third_party/breakpad:minidump_dump",
-      "//third_party/breakpad:minidump_stackwalk",
-    ]
-  }
-
   if (is_mac) {
     data += [
       # Required for the hermetic otool binary, which is required for
-- 
2.25.1

